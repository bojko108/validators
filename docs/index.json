[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/gisValidators.js",
    "content": "import { lessThanOrEqual } from './validators';\r\nimport { getDistance, degreesToMeters } from './math';\r\n\r\n/**\r\n * For **Location** object - checks whether a value is more precise than `validValue`\r\n * @param {Number} validValue - accuracy in meters\r\n * @example\r\n * precision(10)({ accuracy: 4 }) => true\r\n * precision(10)({ accuracy: 12 }) => false\r\n * precision(10)({ coords: { accuracy: 4 }}) => true\r\n * precision(10)({ coords: { accuracy: 12 }}) => false\r\n */\r\nexport const precision = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is more precise than `validValue`\r\n   * @param {!Object} value - location object, returned by the GPS\r\n   * ```\r\n   * [value.accuracy] - accuracy in meters\r\n   * [value.coords] - coords object returned by the GPS\r\n   * [value.coords.accuracy] - accuracy in meters\r\n   * ```\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    const coords = value.coords || value;\r\n    return coords.accuracy <= validValue;\r\n  };\r\n  return validator;\r\n};\r\n/**\r\n * For **Coordinates** - distance between `p1` and `p2` is less than or equal to `validValue`\r\n * @param {!Number} validValue\r\n * @example\r\n * maxDistance(100)([325763.7233, 450358.7089], [325758.0054, 450367.7143]) => true\r\n * maxDistance(100)([42.678748, 23.338703], [42.678803, 23.338928], true) => true\r\n * maxDistance(100)([325763.7233, 450358.7089], [325724.1967, 450516.2508]) => false\r\n */\r\nexport const maxDistance = validValue => {\r\n  const validator = lessThanOrEqual(validValue);\r\n  /**\r\n   * @param {!Array.<Number>} p1 - coordinates of first point in format `[lon, lat]`, `[e, n]`, `[x, y]`\r\n   * @param {!Array.<Number>} p2 - coordinates of second point in format `[lon, lat]`, `[e, n]`, `[x, y]`\r\n   * @param {Boolean} [useDegrees] - if `true` the distance will be calculated in decimal degrees and then\r\n   * converted to meters, using the average latitude as a reference parallel\r\n   */\r\n  const validatorFunction = (p1, p2, useDegrees = false) => {\r\n    let distance = getDistance(p1, p2);\r\n    if (useDegrees) {\r\n      const midLatitude = (p1[1] + p2[1]) / 2;\r\n      distance = degreesToMeters(distance, midLatitude);\r\n    }\r\n    return validator(distance);\r\n  };\r\n  return validatorFunction;\r\n};\r\n/**\r\n * For **Number, String** - checks whether a value is present in `validValue` domain members.\r\n * This will check only `code` property, you can use `valueInDomain()` to search for values.\r\n * @param {!Array.<*>} domainItems\r\n * @example\r\n * codeInDomain([\r\n *    { code: 1, name: '0.4 kV' },\r\n *    { code: 2, name: '10 kV' },\r\n *    { code: 3, name: '20 kV' },\r\n *    { code: 4, name: '220 kV' }\r\n * ])(2) => true\r\n * codeInDomain([\r\n *    { code: 1, name: '0.4 kV' },\r\n *    { code: 2, name: '10 kV' },\r\n *    { code: 3, name: '20 kV' },\r\n *    { code: 4, name: '220 kV' }\r\n * ])(123) => false\r\n */\r\nexport const codeInDomain = domainItems => {\r\n  /**\r\n   * Returns `true` if `value` is present in `validValue` domain members as a code\r\n   * @param {*} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    if (!value) return false;\r\n    return domainItems.findIndex(({ code }) => value === code) > -1;\r\n  };\r\n  return validator;\r\n};\r\n/**\r\n * For **Number, String** - checks whether a value is present in `validValue` domain members.\r\n * This will check `name` (used by ESRI domains) or `value` property, you can use `codeInDomain()` to search for codes.\r\n * @param {!Array.<*>} domainItems\r\n * @example\r\n * valueInDomain([\r\n *    { code: 1, name: '0.4 kV' },\r\n *    { code: 2, name: '10 kV' },\r\n *    { code: 3, name: '20 kV' },\r\n *    { code: 4, name: '220 kV' }\r\n * ])('220 kV') => true\r\n * valueInDomain([\r\n *    { code: 1, name: '0.4 kV' },\r\n *    { code: 2, name: '10 kV' },\r\n *    { code: 3, name: '20 kV' },\r\n *    { code: 4, name: '220 kV' }\r\n * ])('test') => false\r\n */\r\nexport const valueInDomain = domainItems => {\r\n  /**\r\n   * Returns `true` if `value` is present in `validValue` domain members as a value\r\n   * @param {*} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = testedValue => {\r\n    if (!testedValue) return false;\r\n    return domainItems.findIndex(({ name, value }) => testedValue === (name || value)) > -1;\r\n  };\r\n  return validator;\r\n};\r\n",
    "static": true,
    "longname": "E:/webprojects/validators/src/gisValidators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "precision",
    "memberof": "src/gisValidators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/gisValidators.js~precision",
    "access": "public",
    "export": true,
    "importPath": "validators/src/gisValidators.js",
    "importStyle": "{precision}",
    "description": "For **Location** object - checks whether a value is more precise than `validValue`",
    "examples": [
      "precision(10)({ accuracy: 4 }) => true\nprecision(10)({ accuracy: 12 }) => false\nprecision(10)({ coords: { accuracy: 4 }}) => true\nprecision(10)({ coords: { accuracy: 12 }}) => false"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": "accuracy in meters"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "maxDistance",
    "memberof": "src/gisValidators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/gisValidators.js~maxDistance",
    "access": "public",
    "export": true,
    "importPath": "validators/src/gisValidators.js",
    "importStyle": "{maxDistance}",
    "description": "For **Coordinates** - distance between `p1` and `p2` is less than or equal to `validValue`",
    "examples": [
      "maxDistance(100)([325763.7233, 450358.7089], [325758.0054, 450367.7143]) => true\nmaxDistance(100)([42.678748, 23.338703], [42.678803, 23.338928], true) => true\nmaxDistance(100)([325763.7233, 450358.7089], [325724.1967, 450516.2508]) => false"
    ],
    "lineNumber": 38,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "codeInDomain",
    "memberof": "src/gisValidators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/gisValidators.js~codeInDomain",
    "access": "public",
    "export": true,
    "importPath": "validators/src/gisValidators.js",
    "importStyle": "{codeInDomain}",
    "description": "For **Number, String** - checks whether a value is present in `validValue` domain members.\nThis will check only `code` property, you can use `valueInDomain()` to search for values.",
    "examples": [
      "codeInDomain([\n   { code: 1, name: '0.4 kV' },\n   { code: 2, name: '10 kV' },\n   { code: 3, name: '20 kV' },\n   { code: 4, name: '220 kV' }\n])(2) => true\ncodeInDomain([\n   { code: 1, name: '0.4 kV' },\n   { code: 2, name: '10 kV' },\n   { code: 3, name: '20 kV' },\n   { code: 4, name: '220 kV' }\n])(123) => false"
    ],
    "lineNumber": 74,
    "params": [
      {
        "nullable": false,
        "types": [
          "Array.<*>"
        ],
        "spread": false,
        "optional": false,
        "name": "domainItems",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "valueInDomain",
    "memberof": "src/gisValidators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/gisValidators.js~valueInDomain",
    "access": "public",
    "export": true,
    "importPath": "validators/src/gisValidators.js",
    "importStyle": "{valueInDomain}",
    "description": "For **Number, String** - checks whether a value is present in `validValue` domain members.\nThis will check `name` (used by ESRI domains) or `value` property, you can use `codeInDomain()` to search for codes.",
    "examples": [
      "valueInDomain([\n   { code: 1, name: '0.4 kV' },\n   { code: 2, name: '10 kV' },\n   { code: 3, name: '20 kV' },\n   { code: 4, name: '220 kV' }\n])('220 kV') => true\nvalueInDomain([\n   { code: 1, name: '0.4 kV' },\n   { code: 2, name: '10 kV' },\n   { code: 3, name: '20 kV' },\n   { code: 4, name: '220 kV' }\n])('test') => false"
    ],
    "lineNumber": 104,
    "params": [
      {
        "nullable": false,
        "types": [
          "Array.<*>"
        ],
        "spread": false,
        "optional": false,
        "name": "domainItems",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "src/index.js",
    "content": "import * as validators from './validators';\r\n\r\n/**\r\n * @typedef Validator\r\n * @property {!String} name - name of the validator\r\n * @property {*} validValue - valid value for this validator\r\n * @property {function(value:*):Boolean} validate - validator function which takes values and validates them\r\n * @property {String} [errorMessage]\r\n */\r\n\r\n/**\r\n * @typedef ValidatorOptions\r\n * @property {!String} name - name of the validator - should be unique\r\n * @property {!*} validValue - valid value for this validator\r\n * @property {String} [errorMessage]\r\n */\r\n\r\n/**\r\n * Get a validator function\r\n * @param {!ValidatorOptions} options - defines validator options\r\n * @return {Validator} validator\r\n * @throws {Error} when `options` parameter is not defined\r\n * @throws {Error} when `options.name` parameter is not defined\r\n * @throws {Error} when there is no validation function defined\r\n * @example\r\n * getValidator({ name: 'required' }) => `required` validator\r\n * getValidator({ name: 'precision', validValue: 4 }) => `precision` validator with accuracy 4 meters\r\n * getValidator({ name: 'between', validValue: [1, 4] }) => `between` validator with valid range [1, 4]\r\n * getValidator({ name: 'maxDistance' validValue: 100 }) => `maxDistance` validator with maxumum distance 100 meters\r\n */\r\nexport const getValidator = options => {\r\n  if (!options) {\r\n    throw '\"options\" must be an object. For example: { name: \"required\" }, { name: \"precision\", validValue: 4 }, { name: \"between\", validValue: [1, 4] }, { name: \"maxDistance\", validValue: 100 }';\r\n  }\r\n  const { name, validValue, errorMessage } = options;\r\n  let validate = options.validate;\r\n  if (!name) {\r\n    const validNames = Object.keys(validators).join('\",\"');\r\n    throw `\"options.name\" is required and should be one of: \"${validNames}\"`;\r\n  }\r\n  if (!validate) {\r\n    const func = validators[name];\r\n    if (!func) {\r\n      throw `Validator \"${name}\" could not be found! Try to define it with: addValidator({ name: \"${name}\", validValue: \"someValidValue\", validate: (value) => { return value === \"someValidValue\" }})`;\r\n    }\r\n    validate = func(validValue);\r\n  }\r\n  return { name, validValue, errorMessage, validate };\r\n};\r\n\r\n/**\r\n * Add a new validator.\r\n * @param {!Validator} options - options for the custom validator\r\n * @return {Validator} validator\r\n * @throws {Error} when `options` parameter is not defined\r\n * @throws {Error} when `options.name` parameter is not defined\r\n * @throws {Error} when a validator already exists\r\n * @throws {Error} when `options.validate` is not a function\r\n * @example\r\n * addValidator({ name: \"exact\", validValue: 1, validate: (value) => value === 1 }) => defines and returns a new validator with name `exact`\r\n */\r\nexport const addValidator = options => {\r\n  if (!options) {\r\n    throw '\"options\" must be an object. For example: { name: \"someName\", validValue: \"someValidValue\", validate: (value) => { return value === \"someValidValue\" }}';\r\n  }\r\n  const { name, validValue, errorMessage, validate } = options;\r\n  if (!name) {\r\n    throw '\"options.name\" is required';\r\n  }\r\n  if (name in validators) {\r\n    throw `Validator \"${name}\" already exists! You can call it with: getValidator({ name: \"${name}\", validValue: \"someValidValue\" })`;\r\n  }\r\n  if (!validate || !validators.isFunction(validate)) {\r\n    throw '\"options.validate\" must be a function';\r\n  }\r\n  validators[name] = validate;\r\n  return { name, validValue, errorMessage, validate };\r\n};\r\n",
    "static": true,
    "longname": "E:/webprojects/validators/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "typedef",
    "name": "Validator",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~Validator",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": false,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the validator"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": "valid value for this validator"
      },
      {
        "nullable": null,
        "types": [
          "function(value:*):Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "validate",
        "description": "validator function which takes values and validates them"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "errorMessage",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "Validator"
    }
  },
  {
    "__docId__": 55,
    "kind": "typedef",
    "name": "ValidatorOptions",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~ValidatorOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": false,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the validator - should be unique"
      },
      {
        "nullable": false,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": "valid value for this validator"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "errorMessage",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "ValidatorOptions"
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "getValidator",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~getValidator",
    "access": "public",
    "export": true,
    "importPath": "validators",
    "importStyle": "{getValidator}",
    "description": "Get a validator function",
    "examples": [
      "getValidator({ name: 'required' }) => `required` validator\ngetValidator({ name: 'precision', validValue: 4 }) => `precision` validator with accuracy 4 meters\ngetValidator({ name: 'between', validValue: [1, 4] }) => `between` validator with valid range [1, 4]\ngetValidator({ name: 'maxDistance' validValue: 100 }) => `maxDistance` validator with maxumum distance 100 meters"
    ],
    "lineNumber": 31,
    "params": [
      {
        "nullable": false,
        "types": [
          "ValidatorOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "defines validator options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Validator"
      ],
      "spread": false,
      "description": "validator"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "when `options` parameter is not defined"
      },
      {
        "types": [
          "Error"
        ],
        "description": "when `options.name` parameter is not defined"
      },
      {
        "types": [
          "Error"
        ],
        "description": "when there is no validation function defined"
      }
    ]
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "addValidator",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~addValidator",
    "access": "public",
    "export": true,
    "importPath": "validators",
    "importStyle": "{addValidator}",
    "description": "Add a new validator.",
    "examples": [
      "addValidator({ name: \"exact\", validValue: 1, validate: (value) => value === 1 }) => defines and returns a new validator with name `exact`"
    ],
    "lineNumber": 62,
    "params": [
      {
        "nullable": false,
        "types": [
          "Validator"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options for the custom validator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Validator"
      ],
      "spread": false,
      "description": "validator"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "when `options` parameter is not defined"
      },
      {
        "types": [
          "Error"
        ],
        "description": "when `options.name` parameter is not defined"
      },
      {
        "types": [
          "Error"
        ],
        "description": "when a validator already exists"
      },
      {
        "types": [
          "Error"
        ],
        "description": "when `options.validate` is not a function"
      }
    ]
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/math.js",
    "content": "/**\r\n * Convert a value from radians to degrees.\r\n * @param {!Number} radians - value in radians\r\n * @return {Number}\r\n */\r\nexport const toDegrees = radians => {\r\n  return radians * (180 / Math.PI);\r\n};\r\n/**\r\n * Conver a value from degrees to radians.\r\n * @param {!Number} degrees - value in decimal degrees\r\n * @return {Number}\r\n */\r\nexport const toRadians = degrees => {\r\n  return degrees * (Math.PI / 180);\r\n};\r\n\r\n/**\r\n * Calculates the Eucledian distance between two points.\r\n * @param {!Array.<Number>} p1\r\n * @param {!Array.<Number>} p2\r\n * @return {Number}\r\n */\r\nexport const getDistance = (p1, p2) => {\r\n  const dx = p2[0] - p1[0],\r\n    dy = p2[1] - p1[1];\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n};\r\n\r\n/**\r\n * Convert distance from meters to decimal degrees\r\n * @public\r\n * @param {!Number} meters - distance in meters\r\n * @param {Number} [latitude=0] - current latitude, default is 0 - the equator\r\n * @return {Number}\r\n */\r\nexport const metersToDegrees = (meters, latitude = 0) => {\r\n  return meters / (111.32 * 1000 * Math.cos(toRadians(latitude)));\r\n};\r\n\r\n/**\r\n * Convert distance from decimal degrees to meters\r\n * @public\r\n * @param {!Number} degrees - distance in decimal degrees\r\n * @param {Number} [latitude=0] - latitude of the reference parallel, default is 0 - the equator\r\n * @return {Number}\r\n */\r\nexport const degreesToMeters = (degrees, latitude = 0) => {\r\n  return degrees * (111.32 * 1000 * Math.cos(toRadians(latitude)));\r\n};\r\n",
    "static": true,
    "longname": "E:/webprojects/validators/src/math.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "toDegrees",
    "memberof": "src/math.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math.js~toDegrees",
    "access": "public",
    "export": true,
    "importPath": "validators/src/math.js",
    "importStyle": "{toDegrees}",
    "description": "Convert a value from radians to degrees.",
    "lineNumber": 6,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "radians",
        "description": "value in radians"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "toRadians",
    "memberof": "src/math.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math.js~toRadians",
    "access": "public",
    "export": true,
    "importPath": "validators/src/math.js",
    "importStyle": "{toRadians}",
    "description": "Conver a value from degrees to radians.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "degrees",
        "description": "value in decimal degrees"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "getDistance",
    "memberof": "src/math.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math.js~getDistance",
    "access": "public",
    "export": true,
    "importPath": "validators/src/math.js",
    "importStyle": "{getDistance}",
    "description": "Calculates the Eucledian distance between two points.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": false,
        "types": [
          "Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "p1",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "p2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "metersToDegrees",
    "memberof": "src/math.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math.js~metersToDegrees",
    "access": "public",
    "export": true,
    "importPath": "validators/src/math.js",
    "importStyle": "{metersToDegrees}",
    "description": "Convert distance from meters to decimal degrees",
    "lineNumber": 37,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "meters",
        "description": "distance in meters"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "latitude",
        "description": "current latitude, default is 0 - the equator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "degreesToMeters",
    "memberof": "src/math.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math.js~degreesToMeters",
    "access": "public",
    "export": true,
    "importPath": "validators/src/math.js",
    "importStyle": "{degreesToMeters}",
    "description": "Convert distance from decimal degrees to meters",
    "lineNumber": 48,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "degrees",
        "description": "distance in decimal degrees"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "latitude",
        "description": "latitude of the reference parallel, default is 0 - the equator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "src/validators.js",
    "content": "export { precision, maxDistance, valueInDomain, codeInDomain } from './gisValidators';\r\n\r\n/**\r\n * Checks whether a value is defined or not\r\n * @example\r\n * isDefined()(4) => true\r\n * isDefined()(null) => false\r\n * isDefined()('') => false\r\n */\r\nexport const isDefined = () => {\r\n  /**\r\n   * Returns `true` if `value` is not `undefined` or `null`.\r\n   * @param {*} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    if (isBoolean()(value)) {\r\n      return true;\r\n    }\r\n    if (isNumber()(value)) {\r\n      return true;\r\n    }\r\n    if (isString()(value)) {\r\n      return true;\r\n    }\r\n    return !!value;\r\n  };\r\n  return validator;\r\n};\r\n/**\r\n * For **Array**, **String** - checks whether value's length is greater than or equal to `validValue`\r\n * @param {!Number} validValue - minimum length value\r\n * @example\r\n * min(3)('as') => false\r\n * min(3)('asd') => true\r\n * min(3)('asdf') => true\r\n */\r\nexport const min = validValue => {\r\n  /**\r\n   * Returns `true` if `value`'s length is greater than or equal to `validValue`\r\n   * @param {!(Array.<*>|String)} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => value.length >= validValue;\r\n  return validator;\r\n};\r\n/**\r\n * For **Array**, **String** - checks whether value's length is greater than or equal to `validValue`\r\n * @param {!Number} validValue - maximum length value\r\n * @example\r\n * max(3)('as') => true\r\n * max(3)('asd') => true\r\n * max(3)('asdf') => false\r\n */\r\nexport const max = validValue => {\r\n  /**\r\n   * Returns `true` if `value`'s length is greater than or equal to `validValue`\r\n   * @param {!(Array.<*>|String)} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => value.length <= validValue;\r\n  return validator;\r\n};\r\n/**\r\n * For **Array**, **String** - checks whether a value contains `validValue`\r\n * @param {*} validValue\r\n * @example\r\n * contain('test')('testA') => true\r\n * contain('test')('B test') => true\r\n * contain('test')([1, 'test'])) => true\r\n * contain('test')('asd') => false\r\n */\r\nexport const contain = validValue => {\r\n  /**\r\n   * Returns `true` if `value` contains `validValue`\r\n   * @param {!(Array.<*>|String)} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return value ? value.indexOf(validValue) > -1 : false;\r\n  };\r\n  return validator;\r\n};\r\n\r\n/**\r\n * For **Array**, **String** - checks whether a value deos not contain `validValue`\r\n * @param {*} validValue\r\n * @example\r\n * notContain('test'))('testA') => false\r\n * notContain('test'))('B test') => false\r\n * notContain('test')([1, 'test'])) => false\r\n * notContain('test'))('asd') => true\r\n */\r\nexport const notContain = validValue => {\r\n  /**\r\n   * Returns `true` if `value` deos not contain `validValue`\r\n   * @param {!(Array.<*>|String)} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return value ? value.indexOf(validValue) === -1 : false;\r\n  };\r\n  return validator;\r\n};\r\n/**\r\n * For **String** - checks whether a value is equal to `validValue`\r\n * @param {String} validValue\r\n * @example\r\n * like('test')('test') => true\r\n * like('test')('Test') => false\r\n * like('test')('asdasd') => false\r\n */\r\nexport const like = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is equal to `validValue`\r\n   * @param {String} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    if (!value && validValue) return false;\r\n    if (value && !validValue) return false;\r\n    if (!value && !validValue) return true;\r\n    return value ? value.toString() === validValue.toString() : false;\r\n  };\r\n  return validator;\r\n};\r\n\r\n/**\r\n * For **String** - checks whether a value is not equal to `validValue`\r\n * @param {String} validValue\r\n * @example\r\n * notLike('test')('asd') => true\r\n * notLike('test')('Test') => true\r\n * notLike('test')('test') => false\r\n */\r\nexport const notLike = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is not equal to `validValue`\r\n   * @param {String} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    if (!value && validValue) return false;\r\n    if (value && !validValue) return false;\r\n    if (!value && !validValue) return true;\r\n    return value ? value.toString() !== validValue.toString() : false;\r\n  };\r\n  return validator;\r\n};\r\n\r\n/**\r\n * For **Number** - checks whether a value is equal to `validValue`\r\n * @param {!Number} validValue\r\n * @example\r\n * equal(2)(2) => true\r\n * equal(2)(22) => false\r\n * equal('test')('test') => false\r\n */\r\nexport const equal = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is equal to `validValue`\r\n   * @param {!Number} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return Number(validValue) === Number(value);\r\n  };\r\n  return validator;\r\n};\r\n/**\r\n * For **Number** - checks whether a value is not equal to `validValue`\r\n * @param {!Number} validValue\r\n * @example\r\n * notEqual(1)(2) => true\r\n * notEqual(1)(1) => false\r\n * notEqual('test')('test') => true\r\n * notEqual('test')('asdd') => true\r\n */\r\nexport const notEqual = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is not equal to `validValue`\r\n   * @param {!Number} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return Number(value) !== Number(validValue);\r\n  };\r\n  return validator;\r\n};\r\n/**\r\n * For **Number** - checks whether a value is in the range of `validValue`\r\n * @param {!Array.<Number>} validValue - as range array\r\n * @example\r\n * between([1, 4])(1) => true\r\n * between([1, 4])(4) => true\r\n * between([1, 4])(6) => false\r\n */\r\nexport const between = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is in range of `validValue`\r\n   * @param {!Number} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => Number(validValue[0]) <= Number(value) && Number(validValue[1]) >= Number(value);\r\n  return validator;\r\n};\r\n\r\n/**\r\n * For **Number** - checks whether a value is not in the range of `validValue`\r\n * @param {!Array.<Number>} validValue - as range array\r\n * @example\r\n * notBetween([1, 4])(1) => false\r\n * notBetween([1, 4])(2) => false\r\n * notBetween([1, 4])(4) => false\r\n * notBetween([1, 4])(6) => true\r\n */\r\nexport const notBetween = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is not in the range of `validValue`\r\n   * @param {!Number} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => Number(validValue[0]) > Number(value) || Number(validValue[1]) < Number(value);\r\n  return validator;\r\n};\r\n/**\r\n * For **Number, String** - checks whether a value is in `validValue` array\r\n * @param {!Array.<*>} validValue\r\n * @example\r\n * inValues([1, 2, 3])(1) => true\r\n * inValues([1, 2, 3])(2) => true\r\n * inValues([1, 2, 3])(3) => true\r\n * inValues([1, 2, 3])(4) => false\r\n */\r\nexport const inValues = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is in `validValue` array\r\n   * @param {*} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    if (!value) return false;\r\n    const valuesIn = validValue.map(v => v.toString());\r\n    return valuesIn.indexOf(value.toString()) > -1;\r\n  };\r\n  return validator;\r\n};\r\n/**\r\n * For **Number, String** - checks whether a value is not in `validValue` array\r\n * @param {!Array.<*>} validValue\r\n * @example\r\n * notInValues([1, 2, 3])(4) => true\r\n * notInValues([1, 2, 3])(3) => false\r\n * notInValues([1, 2, 3])(2) => false\r\n * notInValues([1, 2, 3])(1) => false\r\n */\r\nexport const notInValues = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is not in `validValue` array\r\n   * @param {*} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    if (!value) return false;\r\n    const valuesNotIn = validValue.map(v => v.toString());\r\n    return valuesNotIn.indexOf(value.toString()) === -1;\r\n  };\r\n  return validator;\r\n};\r\n/**\r\n * For **Number** - checks whether a value is greater than `validValue`\r\n * @param {!Number} validValue\r\n * @example\r\n * greaterThan(2)(12) => true\r\n * greaterThan(2)(2) => false\r\n * greaterThan(2)(1) => false\r\n */\r\nexport const greaterThan = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is greater than `validValue`\r\n   * @param {!Number} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return Number(value) > Number(validValue);\r\n  };\r\n  return validator;\r\n};\r\n/**\r\n * For **Number** - checks whether a value is greater than or equal to `validValue`\r\n * @param {!Number} validValue\r\n * @example\r\n * greaterThanOrEqual(2)(2) => true\r\n * greaterThanOrEqual(2)(12) => true\r\n * greaterThanOrEqual(2)(1) => false\r\n */\r\nexport const greaterThanOrEqual = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is greater than or equal to `validValue`\r\n   * @param {!Number} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return Number(value) >= Number(validValue);\r\n  };\r\n  return validator;\r\n};\r\n/**\r\n * For **Number** - checks whether a value is less than `validValue`\r\n * @param {!Number} validValue\r\n * @example\r\n * lessThan(2)(1) => true\r\n * lessThan(2)(0) => true\r\n * lessThan(2)(2) => false\r\n */\r\nexport const lessThan = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is less than `validValue`\r\n   * @param {!Number} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return Number(value) < Number(validValue);\r\n  };\r\n  return validator;\r\n};\r\n/**\r\n * For **Number** - checks whether a value is less than or equal to `validValue`\r\n * @param {!Number} validValue\r\n * @example\r\n * lessThanOrEqual(2)(2) => true\r\n * lessThanOrEqual(2)(1) => true\r\n * lessThanOrEqual(2)(22) => false\r\n */\r\nexport const lessThanOrEqual = validValue => {\r\n  /**\r\n   * Returns `true` if `value` is less than or equal to `validValue`\r\n   * @param {!Number} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return Number(value) <= Number(validValue);\r\n  };\r\n  return validator;\r\n};\r\n\r\n/**\r\n * For **Any** - checks whether a value is from type `string`\r\n * @example\r\n * isString()('test') => true\r\n * isString()('2') => true\r\n * isString()('false') => true\r\n * isString()(false) => false\r\n * isString()(1) => false\r\n * isString()() => false\r\n */\r\nexport const isString = () => {\r\n  /**\r\n   * Returns `true` if `value` is from type `string`\r\n   * @param {*} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return typeof value === 'string';\r\n  };\r\n  return validator;\r\n};\r\n\r\n/**\r\n * For **Any** - checks whether a value is an `array`\r\n * @example\r\n * isArray()([]) => true\r\n * isArray()(['2']) => true\r\n * isArray()(false) => false\r\n * isArray()(1) => false\r\n * isArray()({}) => false\r\n * isArray()() => false\r\n */\r\nexport const isArray = () => {\r\n  /**\r\n   * Returns `true` if `value` is an `array`\r\n   * @param {*} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return {}.toString.call(value) === '[object Array]';\r\n  };\r\n  return validator;\r\n};\r\n\r\n/**\r\n * For **Any** - checks whether a value is from type `number`\r\n * @example\r\n * isNumber()(1) => true\r\n * isNumber()(-1) => true\r\n * isNumber()('1') => false\r\n * isNumber()() => false\r\n * isNumber()({}) => false\r\n * isNumber()(false) => false\r\n */\r\nexport const isNumber = () => {\r\n  /**\r\n   * Returns `true` if `value` is from type `number`\r\n   * @param {*} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return typeof value === 'number' && !isNaN(value);\r\n  };\r\n  return validator;\r\n};\r\n\r\n/**\r\n * For **Any** - checks whether a value is an integer `number`\r\n * @example\r\n * isInteger()(1) => true\r\n * isInteger()(-1) => true\r\n * isInteger()(-2.3) => false\r\n * isInteger()(3.1415926536) => false\r\n * isInteger()({}) => false\r\n * isInteger()(false) => false\r\n */\r\nexport const isInteger = () => {\r\n  /**\r\n   * Returns `true` if `value` is an integer `number`\r\n   * @param {*} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return isNumber()(value) && value % 1 === 0;\r\n  };\r\n  return validator;\r\n};\r\n\r\n/**\r\n * For **Any** - checks whether a value is from type `boolean`\r\n * @example\r\n * isBoolean()(true) => true\r\n * isBoolean()(false) => true\r\n * isBoolean()('true') => false\r\n * isBoolean()() => false\r\n */\r\nexport const isBoolean = () => {\r\n  /**\r\n   * Returns `true` if `value` is from type `boolean`\r\n   * @param {*} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return typeof value === 'boolean';\r\n  };\r\n  return validator;\r\n};\r\n\r\n/**\r\n * For **Any** - checks whether a value is `function`\r\n * @example\r\n * isFunction()(a => a * a) => true\r\n * isFunction()(true) => false\r\n * isFunction()({}) => false\r\n */\r\nexport const isFunction = () => {\r\n  /**\r\n   * Рeturns `true` if `value` is `function`\r\n   * @param {*} value - to be checked\r\n   * @return {Boolean}\r\n   */\r\n  const validator = value => {\r\n    return typeof value === 'function';\r\n  };\r\n  return validator;\r\n};\r\n",
    "static": true,
    "longname": "E:/webprojects/validators/src/validators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "isDefined",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~isDefined",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{isDefined}",
    "description": "Checks whether a value is defined or not",
    "examples": [
      "isDefined()(4) => true\nisDefined()(null) => false\nisDefined()('') => false"
    ],
    "lineNumber": 10,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "min",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~min",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{min}",
    "description": "For **Array**, **String** - checks whether value's length is greater than or equal to `validValue`",
    "examples": [
      "min(3)('as') => false\nmin(3)('asd') => true\nmin(3)('asdf') => true"
    ],
    "lineNumber": 38,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": "minimum length value"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "max",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~max",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{max}",
    "description": "For **Array**, **String** - checks whether value's length is greater than or equal to `validValue`",
    "examples": [
      "max(3)('as') => true\nmax(3)('asd') => true\nmax(3)('asdf') => false"
    ],
    "lineNumber": 55,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": "maximum length value"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "contain",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~contain",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{contain}",
    "description": "For **Array**, **String** - checks whether a value contains `validValue`",
    "examples": [
      "contain('test')('testA') => true\ncontain('test')('B test') => true\ncontain('test')([1, 'test'])) => true\ncontain('test')('asd') => false"
    ],
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "notContain",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~notContain",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{notContain}",
    "description": "For **Array**, **String** - checks whether a value deos not contain `validValue`",
    "examples": [
      "notContain('test'))('testA') => false\nnotContain('test'))('B test') => false\nnotContain('test')([1, 'test'])) => false\nnotContain('test'))('asd') => true"
    ],
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "like",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~like",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{like}",
    "description": "For **String** - checks whether a value is equal to `validValue`",
    "examples": [
      "like('test')('test') => true\nlike('test')('Test') => false\nlike('test')('asdasd') => false"
    ],
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "notLike",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~notLike",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{notLike}",
    "description": "For **String** - checks whether a value is not equal to `validValue`",
    "examples": [
      "notLike('test')('asd') => true\nnotLike('test')('Test') => true\nnotLike('test')('test') => false"
    ],
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "equal",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~equal",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{equal}",
    "description": "For **Number** - checks whether a value is equal to `validValue`",
    "examples": [
      "equal(2)(2) => true\nequal(2)(22) => false\nequal('test')('test') => false"
    ],
    "lineNumber": 159,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "notEqual",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~notEqual",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{notEqual}",
    "description": "For **Number** - checks whether a value is not equal to `validValue`",
    "examples": [
      "notEqual(1)(2) => true\nnotEqual(1)(1) => false\nnotEqual('test')('test') => true\nnotEqual('test')('asdd') => true"
    ],
    "lineNumber": 179,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "between",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~between",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{between}",
    "description": "For **Number** - checks whether a value is in the range of `validValue`",
    "examples": [
      "between([1, 4])(1) => true\nbetween([1, 4])(4) => true\nbetween([1, 4])(6) => false"
    ],
    "lineNumber": 198,
    "params": [
      {
        "nullable": false,
        "types": [
          "Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": "as range array"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "notBetween",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~notBetween",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{notBetween}",
    "description": "For **Number** - checks whether a value is not in the range of `validValue`",
    "examples": [
      "notBetween([1, 4])(1) => false\nnotBetween([1, 4])(2) => false\nnotBetween([1, 4])(4) => false\nnotBetween([1, 4])(6) => true"
    ],
    "lineNumber": 217,
    "params": [
      {
        "nullable": false,
        "types": [
          "Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": "as range array"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "inValues",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~inValues",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{inValues}",
    "description": "For **Number, String** - checks whether a value is in `validValue` array",
    "examples": [
      "inValues([1, 2, 3])(1) => true\ninValues([1, 2, 3])(2) => true\ninValues([1, 2, 3])(3) => true\ninValues([1, 2, 3])(4) => false"
    ],
    "lineNumber": 235,
    "params": [
      {
        "nullable": false,
        "types": [
          "Array.<*>"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "notInValues",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~notInValues",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{notInValues}",
    "description": "For **Number, String** - checks whether a value is not in `validValue` array",
    "examples": [
      "notInValues([1, 2, 3])(4) => true\nnotInValues([1, 2, 3])(3) => false\nnotInValues([1, 2, 3])(2) => false\nnotInValues([1, 2, 3])(1) => false"
    ],
    "lineNumber": 257,
    "params": [
      {
        "nullable": false,
        "types": [
          "Array.<*>"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "greaterThan",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~greaterThan",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{greaterThan}",
    "description": "For **Number** - checks whether a value is greater than `validValue`",
    "examples": [
      "greaterThan(2)(12) => true\ngreaterThan(2)(2) => false\ngreaterThan(2)(1) => false"
    ],
    "lineNumber": 278,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "greaterThanOrEqual",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~greaterThanOrEqual",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{greaterThanOrEqual}",
    "description": "For **Number** - checks whether a value is greater than or equal to `validValue`",
    "examples": [
      "greaterThanOrEqual(2)(2) => true\ngreaterThanOrEqual(2)(12) => true\ngreaterThanOrEqual(2)(1) => false"
    ],
    "lineNumber": 297,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "lessThan",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~lessThan",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{lessThan}",
    "description": "For **Number** - checks whether a value is less than `validValue`",
    "examples": [
      "lessThan(2)(1) => true\nlessThan(2)(0) => true\nlessThan(2)(2) => false"
    ],
    "lineNumber": 316,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "lessThanOrEqual",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~lessThanOrEqual",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{lessThanOrEqual}",
    "description": "For **Number** - checks whether a value is less than or equal to `validValue`",
    "examples": [
      "lessThanOrEqual(2)(2) => true\nlessThanOrEqual(2)(1) => true\nlessThanOrEqual(2)(22) => false"
    ],
    "lineNumber": 335,
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "validValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "isString",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~isString",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{isString}",
    "description": "For **Any** - checks whether a value is from type `string`",
    "examples": [
      "isString()('test') => true\nisString()('2') => true\nisString()('false') => true\nisString()(false) => false\nisString()(1) => false\nisString()() => false"
    ],
    "lineNumber": 357,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "isArray",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~isArray",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{isArray}",
    "description": "For **Any** - checks whether a value is an `array`",
    "examples": [
      "isArray()([]) => true\nisArray()(['2']) => true\nisArray()(false) => false\nisArray()(1) => false\nisArray()({}) => false\nisArray()() => false"
    ],
    "lineNumber": 379,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "isNumber",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~isNumber",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{isNumber}",
    "description": "For **Any** - checks whether a value is from type `number`",
    "examples": [
      "isNumber()(1) => true\nisNumber()(-1) => true\nisNumber()('1') => false\nisNumber()() => false\nisNumber()({}) => false\nisNumber()(false) => false"
    ],
    "lineNumber": 401,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "isInteger",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~isInteger",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{isInteger}",
    "description": "For **Any** - checks whether a value is an integer `number`",
    "examples": [
      "isInteger()(1) => true\nisInteger()(-1) => true\nisInteger()(-2.3) => false\nisInteger()(3.1415926536) => false\nisInteger()({}) => false\nisInteger()(false) => false"
    ],
    "lineNumber": 423,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "isBoolean",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~isBoolean",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{isBoolean}",
    "description": "For **Any** - checks whether a value is from type `boolean`",
    "examples": [
      "isBoolean()(true) => true\nisBoolean()(false) => true\nisBoolean()('true') => false\nisBoolean()() => false"
    ],
    "lineNumber": 443,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/validators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "validators/src/validators.js",
    "importStyle": "{isFunction}",
    "description": "For **Any** - checks whether a value is `function`",
    "examples": [
      "isFunction()(a => a * a) => true\nisFunction()(true) => false\nisFunction()({}) => false"
    ],
    "lineNumber": 462,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# Validators\r\n\r\nSet of custom validation functions. You can read the documentation here: [https://bojko108.github.io/validators/](https://bojko108.github.io/validators/)\r\n\r\n## How to install\r\n\r\n```\r\nyarn add bojko108/validators\r\n```\r\n\r\n## How to use\r\n\r\n### Get a validator\r\n\r\n```js\r\nimport { getValidator } from 'validators';\r\n\r\nconst validator1 = getValidator({ name: 'precision' validValue: 10 });\r\nvalidator1.validate({ coords: { accuracy: 4 } }); // => true\r\n\r\nconst validator2 = getValidator({ name: 'between', validValue: [1, 4] });\r\nvalidator2.validate(1); // => true\r\n```\r\n\r\n### Add a custom validator\r\n\r\n```js\r\nimport { addValidator } from 'validators';\r\n\r\nconst validator = addValidator({\r\n  name: 'exact',\r\n  validValue: 1,\r\n  validate: value => {\r\n    return value === validValue;\r\n  }\r\n});\r\nvalidator.validate(value);\r\n```\r\n\r\n## Validators\r\n\r\nHere is a list of all predefined validators. You can use them by calling `getValidator({ name: <validatorName> })`. All custom validators added by `addValidator()` will be available in `getValidator()`. An error is thrown if a validator already exists and you try to redefine it with `addValidator()`.\r\n\r\n### Validators\r\n\r\n- `isDefined` - returns `true` if the value is defined. Returns `false` for `undefined` and `null`.\r\n- `isString` - returns `true` if the value is `string`.\r\n- `isArray` - returns `true` if the value type is `array`.\r\n- `isNumber` - returns `true` if the value type is `number`.\r\n- `isInteger` - returns `true` if the value is an integer `number`.\r\n- `isBoolean` - returns `true` if the value type is `boolean`.\r\n- `isFunction` - returns `true` if the value type is `function`.\r\n- `min` - validates length of **Array** or **String**. Returns `true` if the length is greater than or equal to the valid value.\r\n- `max` - validates length of **Array** or **String**. Returns `true` if the length is less than or equal to the valid value.\r\n- `contain` - validates **Array** or **String**. Returns `true` if the valid value contains tested value. Opposite of `notContain`.\r\n- `notContain` - validates **Array** or **String**. Returns `true` if the valid value does not contain tested value. Opposite of `contain`.\r\n- `like` - validates **String**. Returns `true` if the tested value is equal to the valid value. Opposite of `notLike`.\r\n- `notLike` - validates **String**. Returns `true` if the tested value is not equal to the valid value. Opposite of `like`.\r\n- `equal` - validates **Number**. Returns `true` if the tested value is equal to the valid value. Opposite of `notEqual`.\r\n- `notEqual` - validates **String**. Returns `true` if the tested value is not equal to the valid value. Opposite of `equal`.\r\n- `between` - validates **Number**. Returns `true` if the tested value is in the range of the valid value. Opposite of `notBetween`.\r\n- `notBetween` - validates strings. Returns `true` if the tested value is not in the range of the valid value. Opposite of `between`.\r\n- `inValues` - validates **Number** or **String**. Returns `true` if the tested value is present in valid value array. Opposite of `notInValues`.\r\n- `notInValues` - validates **Number** or **String**. Returns `true` if the tested value is not present in valid value array. Opposite of `inValues`.\r\n- `greaterThan` - validates **Number**. Returns `true` if the tested value is greater than the valid value. Opposite of `lessThan`.\r\n- `greaterThanOrEqual` - validates **Number**. Returns `true` if the tested value is greater than or equal to the valid value.\r\n- `lessThan` - validates **Number**. Returns `true` if the tested value is less than the valid value. Opposite of `greaterThan`.\r\n- `lessThanOrEqual` - validates **Number**. Returns `true` if the tested value is less than or equal to the valid value.\r\n\r\n### Gis Validators\r\n\r\n- `precision` - validates the accuracy of a [Location](https://docs.expo.io/versions/latest/sdk/location/#type-location) object.\r\n- `maxDistance` - calculates distance between two points and returns `true` if it's less than or equal to the valid value. The distance is calculated using eucledian formula. If you use geographic coordinates, you can pass a third parameter to tell the function that the distance should be calculated in meters instead of decimal degrees:\r\n\r\n```js\r\nimport { maxDistance } from 'validators/src/gisValidators.js';\r\n\r\nconst validValue = 100; // in meters\r\nconst p1 = [42.678748, 23.338703]; // in decimal degrees\r\nconst p2 = [42.678803, 23.338928]; // in decimal degrees\r\n\r\n// pass true so the distance can be calculated in meters before compared to the valid value\r\nmaxDistance(validValue)(p1, p2, true);\r\n```\r\n\r\n- `codeInDomain` - validates **Number** or **String**. Returns `true` if the tested value is present in the domain as a value.\r\n- `valueInDomain` - validates **Number** or **String**. Returns `true` if the tested value is present in the domain as a code.\r\n\r\n## Tests\r\n\r\nCheck [tests](https://github.com/bojko108/validators/tree/master/tests) for more examples.\r\n\r\n## License\r\n\r\ntransformations is [MIT](https://github.com/bojko108/validators/tree/master/LICENSE) License @ bojko108\r\n",
    "longname": "E:\\webprojects\\validators\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"validators\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Set of custom validation functions.\",\r\n  \"author\": \"bojko108 <bojko108@gmail.com>\",\r\n  \"license\": \"MIT\",\r\n  \"main\": \"./src/index.js\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/bojko108/validators.git\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"mocha --watch --require babel-core/register ./tests/**/*.test.js\",\r\n    \"test:nowatch\": \"mocha --require babel-core/register ./tests/**/*.test.js\",\r\n    \"docs\": \"esdoc -c ./.esdoc.json\",\r\n    \"build\": \"yarn test:nowatch && yarn docs\",\r\n    \"patch\": \"yarn build && npm version patch --no-git-tag-version\",\r\n    \"minor\": \"yarn build && npm version minor --no-git-tag-version\",\r\n    \"major\": \"yarn build && npm version major --no-git-tag-version\"\r\n  },\r\n  \"dependencies\": {},\r\n  \"devDependencies\": {\r\n    \"babel\": \"^6.23.0\",\r\n    \"babel-core\": \"^6.26.3\",\r\n    \"babel-preset-es2015\": \"^6.24.1\",\r\n    \"chai\": \"^4.2.0\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-lint-plugin\": \"^1.0.2\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"mocha\": \"^5.2.0\"\r\n  }\r\n}\r\n",
    "longname": "E:\\webprojects\\validators\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]